<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         id="WebApp_ID" version="3.1">

    <!-- 学习的前置条件-->
    <!-- web.xml 中 servlet、filter 、listener 、context-param 加载顺序-->
    <!-- load-on-startup 作用，影响了 servlet 对象创建的时机 -->
    <!-- url-pattern 标签的配置方式有四种：/dispatcherServlet 、/* 、/ 、/*.do 以上四种配置，加载顺序是：
        -->
    <!-- url-pattern 标签的配置为什么配置/*报错，原因是它拦截了JSP请求，但又不能处理 JSP请求;
        /就不拦截JSP请求，而配置/*，就会拦截 JSP 请求-->
    <!-- 配置了springmvc 读取spring配置文件产生了spring父子容器的问题-->

    <!-- 配置前端控制器 -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 设置 spring 配置文件路径 -->
        <!-- 如果不设置初始化参数，那么 DispatcherServlet 会读取默认路径下的配置文件 -->
        <!-- 默认配置文件路径：/WEB-INF/springmvc-servlet.xml -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <!-- 指定初始化时机,设置为2表示context启动时，DispatcherServlet它会跟随初始化，否则
          DispatcherServlet 就会在第一次请求时创建-->
        <load-on-startup>2</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!-- 不要配置为 /* 否则报错
             通俗解释：/* 会拦截整个项目中的资源访问，包含 JSP 和静态资源的访问，但对于
             静态资源的访问 SpringMVC 提供了默认的handler 处理器，
             但是对于jsp 来讲，SpringMVC没有提供默认的处理器，我们也没有手动编写处理器-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
