<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 从底层往上层配置 -->
    <!-- 管理Spring 内置的 DataSource -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/seckill?useUnicode=true"/>
        <property name="username" value="root"/>
        <property name="password" value="rootroot"/>
    </bean>

    <!-- 管理 jdbctemplate -->
    <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"></constructor-arg>
    </bean>

    <!--<context:component-scan base-package="com.issac.ssm.service"/>-->

    <bean class="com.issac.dao.UserDaoImpl" id="userDao">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean class="UserServiceImpl" id="userService">
        <property name="userDao" ref="userDao" />
    </bean>

    <!-- 配置平台事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 事务通知 -->
    <!-- tx-advice:对应的处理器类就是 TransactionInterceptor 类 （实现了 MethodInterceptor）-->
    <!-- TransactionInterceptor 类实现事务是通过 transaction-manager 属性指定值进行事务管理-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 设置事务管理信息 -->
        <tx:attributes>
            <!-- 增删改使用REQUIRED 事务传播行为 -->
            <!-- 查询使用read-only-->
            <tx:method name="transfer*" propagation="REQUIRED" read-only="false"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置基于 aspectJ + XML 的声明式事务 -->
    <aop:config>
        <!-- aop:advisor 标签使用的是传统spring aop 开发方式实现的 -->
        <!-- spring 已经实现了该增强功能，spring 使用的是实现 MethodInterceptor 接口的方式实现的-->
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* *..*..*ServiceImpl.*(..))" />
    </aop:config>
</beans>